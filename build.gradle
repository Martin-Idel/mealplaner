apply plugin: "java"
apply plugin: "eclipse"

apply plugin: "checkstyle"
apply plugin: "pmd"
// apply plugin: "findbugs"

allprojects {
    repositories {
        jcenter()
        mavenCentral()
    }
}

subprojects {
    version = '1.0'
}

configurations {
	runtimeLibraries
}

dependencies {
    compile "org.slf4j:slf4j-api:1.7.22"
    compile "org.swinglabs.swingx:swingx-all:1.6.5-1"
    compile group: "org.apache.logging.log4j", name: "log4j-slf4j-impl", version: "2.9.1"
    compile group: "org.apache.logging.log4j", name: "log4j-api", version: "2.9.1"
    compile group: "org.apache.logging.log4j", name: "log4j-core", version: "2.9.1"
    annotationProcessor group: "org.apache.logging.log4j", name: "log4j-core", version: "2.9.1"
    compile group: "javax.xml.bind", name: "jaxb-api", version: "2.4.0-b180830.0359"

    runtime "org.glassfish.jaxb:jaxb-runtime:2.4.0-b180830.0438"
    runtime "org.swinglabs.swingx:swingx-all:1.6.5-1"

    testImplementation "org.assertj:assertj-swing-junit:3.8.0"
    testImplementation "org.assertj:assertj-core:3.8.0"
    testImplementation "junit:junit:4.12"
    testImplementation "org.mockito:mockito-core:1.10.19"
}

task copyLicenses(type: Copy) {
	into "build/libs/licenses/"
	from "licenses/"
}

allprojects {
    test {
        testLogging {
            events "PASSED", "FAILED", "SKIPPED"
        }

        afterSuite { desc, result ->
            if (!desc.parent) {
                println "Test results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            }
        }
    }
}

allprojects {
    checkstyle {
        toolVersion = "8.5"
        ignoreFailures = false
    }

    tasks.withType(Checkstyle).each { checkstyleTask ->
        checkstyleTask.doLast {
            reports.all { report ->
                def outputFile = report.destination
                if (outputFile.exists() && outputFile.text.contains("<error ")) {
                    throw new GradleException("There were checkstyle warnings! For more info check $outputFile")
                }
            }
        }
    }
}

allprojects {
    pmd {
        toolVersion = "5.8.1"
        ignoreFailures = false
        reportsDir = file("$project.buildDir/reports/pmd")
        ruleSets = [
                "java-basic",
                "java-braces",
                "java-clone",
                "java-empty",
                "java-finalizers",
                "java-strictexception",
                "java-sunsecure",
                "java-typeresolution",
                "java-unnecessary",
                "java-unusedcode",
                "java-design",
        ]
    }
}

// findbugs {
// 	toolVersion = "3.0.1"
// 	ignoreFailures = false
// 	effort = "max"
// 	excludeFilter = file("config/findbugs/exclude.xml")
// }
