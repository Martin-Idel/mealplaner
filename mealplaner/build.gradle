apply plugin: "java"
apply plugin: "application"

mainClassName = "mealplaner.Kochplaner"

distributions {
    main {
        contents {
            from '../licenses'
            from '../README.md'
            from '../NOTICE.md'
            from '../LICENSE'
        }
    }
}


dependencies {
    implementation group: "org.slf4j", name: "slf4j-api", version: "${slf4jVersion}"
    implementation group: "org.apache.logging.log4j", name: "log4j-slf4j-impl", version: "${log4jVersion}"
    implementation group: "org.apache.logging.log4j", name: "log4j-api", version: "${log4jVersion}"
    implementation group: "org.apache.logging.log4j", name: "log4j-core", version: "${log4jVersion}"
    implementation project(":mealplaner-commons")
    implementation project(":mealplaner-gui-commons")
    implementation project(":mealplaner-model")
    implementation project(":mealplaner-core")
    implementation project(":mealplaner-gui")
    // TODO Try to get rid of these by using other scripts
    implementation project(":mealplaner-plugins:comment")
    implementation project(":mealplaner-plugins:cookingtime")
    implementation project(":mealplaner-plugins:courses")
    implementation project(":mealplaner-plugins:preference")
    implementation project(":mealplaner-plugins:sidedish")
    implementation project(":mealplaner-plugins:utensil")
    implementation project(":mealplaner-plugins:vegetarian")
}

// Add all other libraries inside the lib-folder (currently using a subfolder is not possible)
// This allows dropping in plugins
startScripts {
    classpath += files('$APP_HOME/lib/*')
    windowsStartScriptGenerator.template = resources.text.fromFile("windowsStartScriptWithoutConsole.txt")
}
